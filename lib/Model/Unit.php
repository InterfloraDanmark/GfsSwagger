<?php
/**
 * Unit
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Unit Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Unit implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Unit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'clearing_code' => 'string',
        'name' => 'string',
        'contact_first_name' => 'string',
        'contact_last_name' => 'string',
        'contact' => '\Swagger\Client\Model\Contact',
        'last_connected' => '\DateTime',
        'unit_times' => '\Swagger\Client\Model\UnitTimes[]',
        'unit_times_special' => '\Swagger\Client\Model\UnitTimesSpecial[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'clearing_code' => null,
        'name' => null,
        'contact_first_name' => null,
        'contact_last_name' => null,
        'contact' => null,
        'last_connected' => 'date-time',
        'unit_times' => null,
        'unit_times_special' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'clearing_code' => 'ClearingCode',
        'name' => 'Name',
        'contact_first_name' => 'ContactFirstName',
        'contact_last_name' => 'ContactLastName',
        'contact' => 'Contact',
        'last_connected' => 'LastConnected',
        'unit_times' => 'UnitTimes',
        'unit_times_special' => 'UnitTimesSpecial'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'clearing_code' => 'setClearingCode',
        'name' => 'setName',
        'contact_first_name' => 'setContactFirstName',
        'contact_last_name' => 'setContactLastName',
        'contact' => 'setContact',
        'last_connected' => 'setLastConnected',
        'unit_times' => 'setUnitTimes',
        'unit_times_special' => 'setUnitTimesSpecial'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'clearing_code' => 'getClearingCode',
        'name' => 'getName',
        'contact_first_name' => 'getContactFirstName',
        'contact_last_name' => 'getContactLastName',
        'contact' => 'getContact',
        'last_connected' => 'getLastConnected',
        'unit_times' => 'getUnitTimes',
        'unit_times_special' => 'getUnitTimesSpecial'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['clearing_code'] = isset($data['clearing_code']) ? $data['clearing_code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['contact_first_name'] = isset($data['contact_first_name']) ? $data['contact_first_name'] : null;
        $this->container['contact_last_name'] = isset($data['contact_last_name']) ? $data['contact_last_name'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['last_connected'] = isset($data['last_connected']) ? $data['last_connected'] : null;
        $this->container['unit_times'] = isset($data['unit_times']) ? $data['unit_times'] : null;
        $this->container['unit_times_special'] = isset($data['unit_times_special']) ? $data['unit_times_special'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets clearing_code
     *
     * @return string
     */
    public function getClearingCode()
    {
        return $this->container['clearing_code'];
    }

    /**
     * Sets clearing_code
     *
     * @param string $clearing_code clearing_code
     *
     * @return $this
     */
    public function setClearingCode($clearing_code)
    {
        $this->container['clearing_code'] = $clearing_code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets contact_first_name
     *
     * @return string
     */
    public function getContactFirstName()
    {
        return $this->container['contact_first_name'];
    }

    /**
     * Sets contact_first_name
     *
     * @param string $contact_first_name contact_first_name
     *
     * @return $this
     */
    public function setContactFirstName($contact_first_name)
    {
        $this->container['contact_first_name'] = $contact_first_name;

        return $this;
    }

    /**
     * Gets contact_last_name
     *
     * @return string
     */
    public function getContactLastName()
    {
        return $this->container['contact_last_name'];
    }

    /**
     * Sets contact_last_name
     *
     * @param string $contact_last_name contact_last_name
     *
     * @return $this
     */
    public function setContactLastName($contact_last_name)
    {
        $this->container['contact_last_name'] = $contact_last_name;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Swagger\Client\Model\Contact
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Swagger\Client\Model\Contact $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets last_connected
     *
     * @return \DateTime
     */
    public function getLastConnected()
    {
        return $this->container['last_connected'];
    }

    /**
     * Sets last_connected
     *
     * @param \DateTime $last_connected last_connected
     *
     * @return $this
     */
    public function setLastConnected($last_connected)
    {
        $this->container['last_connected'] = $last_connected;

        return $this;
    }

    /**
     * Gets unit_times
     *
     * @return \Swagger\Client\Model\UnitTimes[]
     */
    public function getUnitTimes()
    {
        return $this->container['unit_times'];
    }

    /**
     * Sets unit_times
     *
     * @param \Swagger\Client\Model\UnitTimes[] $unit_times unit_times
     *
     * @return $this
     */
    public function setUnitTimes($unit_times)
    {
        $this->container['unit_times'] = $unit_times;

        return $this;
    }

    /**
     * Gets unit_times_special
     *
     * @return \Swagger\Client\Model\UnitTimesSpecial[]
     */
    public function getUnitTimesSpecial()
    {
        return $this->container['unit_times_special'];
    }

    /**
     * Sets unit_times_special
     *
     * @param \Swagger\Client\Model\UnitTimesSpecial[] $unit_times_special unit_times_special
     *
     * @return $this
     */
    public function setUnitTimesSpecial($unit_times_special)
    {
        $this->container['unit_times_special'] = $unit_times_special;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


