<?php
/**
 * QueryField
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * QueryField Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QueryField implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QueryField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'field' => 'int',
        'item_number' => 'int',
        'value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'field' => 'int32',
        'item_number' => 'int32',
        'value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'field' => 'Field',
        'item_number' => 'ItemNumber',
        'value' => 'Value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'field' => 'setField',
        'item_number' => 'setItemNumber',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'field' => 'getField',
        'item_number' => 'getItemNumber',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FIELD_1 = 1;
    const FIELD_2 = 2;
    const FIELD_3 = 3;
    const FIELD_4 = 4;
    const FIELD_5 = 5;
    const FIELD_6 = 6;
    const FIELD_10 = 10;
    const FIELD_11 = 11;
    const FIELD_12 = 12;
    const FIELD_13 = 13;
    const FIELD_14 = 14;
    const FIELD_15 = 15;
    const FIELD_16 = 16;
    const FIELD_17 = 17;
    const FIELD_18 = 18;
    const FIELD_19 = 19;
    const FIELD_20 = 20;
    const FIELD_21 = 21;
    const FIELD_22 = 22;
    const FIELD_23 = 23;
    const FIELD_24 = 24;
    const FIELD_25 = 25;
    const FIELD_26 = 26;
    const FIELD_27 = 27;
    const FIELD_28 = 28;
    const FIELD_29 = 29;
    const FIELD_30 = 30;
    const FIELD_31 = 31;
    const FIELD_32 = 32;
    const FIELD_33 = 33;
    const FIELD_34 = 34;
    const FIELD_35 = 35;
    const FIELD_36 = 36;
    const FIELD_37 = 37;
    const FIELD_38 = 38;
    const FIELD_39 = 39;
    const FIELD_40 = 40;
    const FIELD_41 = 41;
    const FIELD_42 = 42;
    const FIELD_43 = 43;
    const FIELD_44 = 44;
    const FIELD_45 = 45;
    const FIELD_46 = 46;
    const FIELD_47 = 47;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFieldAllowableValues()
    {
        return [
            self::FIELD_1,
            self::FIELD_2,
            self::FIELD_3,
            self::FIELD_4,
            self::FIELD_5,
            self::FIELD_6,
            self::FIELD_10,
            self::FIELD_11,
            self::FIELD_12,
            self::FIELD_13,
            self::FIELD_14,
            self::FIELD_15,
            self::FIELD_16,
            self::FIELD_17,
            self::FIELD_18,
            self::FIELD_19,
            self::FIELD_20,
            self::FIELD_21,
            self::FIELD_22,
            self::FIELD_23,
            self::FIELD_24,
            self::FIELD_25,
            self::FIELD_26,
            self::FIELD_27,
            self::FIELD_28,
            self::FIELD_29,
            self::FIELD_30,
            self::FIELD_31,
            self::FIELD_32,
            self::FIELD_33,
            self::FIELD_34,
            self::FIELD_35,
            self::FIELD_36,
            self::FIELD_37,
            self::FIELD_38,
            self::FIELD_39,
            self::FIELD_40,
            self::FIELD_41,
            self::FIELD_42,
            self::FIELD_43,
            self::FIELD_44,
            self::FIELD_45,
            self::FIELD_46,
            self::FIELD_47,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['field'] = isset($data['field']) ? $data['field'] : null;
        $this->container['item_number'] = isset($data['item_number']) ? $data['item_number'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFieldAllowableValues();
        if (!is_null($this->container['field']) && !in_array($this->container['field'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'field', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets field
     *
     * @return int
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     *
     * @param int $field field
     *
     * @return $this
     */
    public function setField($field)
    {
        $allowedValues = $this->getFieldAllowableValues();
        if (!is_null($field) && !in_array($field, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'field', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['field'] = $field;

        return $this;
    }

    /**
     * Gets item_number
     *
     * @return int
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     *
     * @param int $item_number item_number
     *
     * @return $this
     */
    public function setItemNumber($item_number)
    {
        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


