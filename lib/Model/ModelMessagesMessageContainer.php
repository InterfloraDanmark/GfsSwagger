<?php
/**
 * ModelMessagesMessageContainer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swan API v4
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ModelMessagesMessageContainer Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelMessagesMessageContainer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Model.Messages.MessageContainer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'count' => 'int',
        'backcharge_cleared_messages' => '\Swagger\Client\Model\ModelMessagesBackchargeClearedMessage[]',
        'backcharge_confirmed_messages' => '\Swagger\Client\Model\ModelMessagesBackchargeConfirmedMessage[]',
        'backcharge_denied_messages' => '\Swagger\Client\Model\ModelMessagesBackchargeDeniedMessage[]',
        'backcharge_messages' => '\Swagger\Client\Model\ModelMessagesBackchargeMessage[]',
        'florist_assigned_messages' => '\Swagger\Client\Model\ModelMessagesFloristAssignedMessage[]',
        'delivery_confirmed_messages' => '\Swagger\Client\Model\ModelMessagesDeliveryConfirmedMessage[]',
        'general_messages' => '\Swagger\Client\Model\ModelMessagesGeneralMessage[]',
        'order_cancellation_confirmed_messages' => '\Swagger\Client\Model\ModelMessagesOrderCancellationConfirmedMessage[]',
        'order_cancellation_denied_messages' => '\Swagger\Client\Model\ModelMessagesOrderCancellationDeniedMessage[]',
        'order_cancellation_messages' => '\Swagger\Client\Model\ModelMessagesOrderCancellationMessage[]',
        'order_cleared_messages' => '\Swagger\Client\Model\ModelMessagesOrderClearedMessage[]',
        'order_messages' => '\Swagger\Client\Model\ModelMessagesOrderMessage[]',
        'order_rejected_messages' => '\Swagger\Client\Model\ModelMessagesOrderRejectedMessage[]',
        'query_messages' => '\Swagger\Client\Model\ModelMessagesQueryMessage[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'count' => 'int32',
        'backcharge_cleared_messages' => null,
        'backcharge_confirmed_messages' => null,
        'backcharge_denied_messages' => null,
        'backcharge_messages' => null,
        'florist_assigned_messages' => null,
        'delivery_confirmed_messages' => null,
        'general_messages' => null,
        'order_cancellation_confirmed_messages' => null,
        'order_cancellation_denied_messages' => null,
        'order_cancellation_messages' => null,
        'order_cleared_messages' => null,
        'order_messages' => null,
        'order_rejected_messages' => null,
        'query_messages' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'count' => 'Count',
        'backcharge_cleared_messages' => 'BackchargeClearedMessages',
        'backcharge_confirmed_messages' => 'BackchargeConfirmedMessages',
        'backcharge_denied_messages' => 'BackchargeDeniedMessages',
        'backcharge_messages' => 'BackchargeMessages',
        'florist_assigned_messages' => 'FloristAssignedMessages',
        'delivery_confirmed_messages' => 'DeliveryConfirmedMessages',
        'general_messages' => 'GeneralMessages',
        'order_cancellation_confirmed_messages' => 'OrderCancellationConfirmedMessages',
        'order_cancellation_denied_messages' => 'OrderCancellationDeniedMessages',
        'order_cancellation_messages' => 'OrderCancellationMessages',
        'order_cleared_messages' => 'OrderClearedMessages',
        'order_messages' => 'OrderMessages',
        'order_rejected_messages' => 'OrderRejectedMessages',
        'query_messages' => 'QueryMessages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'count' => 'setCount',
        'backcharge_cleared_messages' => 'setBackchargeClearedMessages',
        'backcharge_confirmed_messages' => 'setBackchargeConfirmedMessages',
        'backcharge_denied_messages' => 'setBackchargeDeniedMessages',
        'backcharge_messages' => 'setBackchargeMessages',
        'florist_assigned_messages' => 'setFloristAssignedMessages',
        'delivery_confirmed_messages' => 'setDeliveryConfirmedMessages',
        'general_messages' => 'setGeneralMessages',
        'order_cancellation_confirmed_messages' => 'setOrderCancellationConfirmedMessages',
        'order_cancellation_denied_messages' => 'setOrderCancellationDeniedMessages',
        'order_cancellation_messages' => 'setOrderCancellationMessages',
        'order_cleared_messages' => 'setOrderClearedMessages',
        'order_messages' => 'setOrderMessages',
        'order_rejected_messages' => 'setOrderRejectedMessages',
        'query_messages' => 'setQueryMessages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'count' => 'getCount',
        'backcharge_cleared_messages' => 'getBackchargeClearedMessages',
        'backcharge_confirmed_messages' => 'getBackchargeConfirmedMessages',
        'backcharge_denied_messages' => 'getBackchargeDeniedMessages',
        'backcharge_messages' => 'getBackchargeMessages',
        'florist_assigned_messages' => 'getFloristAssignedMessages',
        'delivery_confirmed_messages' => 'getDeliveryConfirmedMessages',
        'general_messages' => 'getGeneralMessages',
        'order_cancellation_confirmed_messages' => 'getOrderCancellationConfirmedMessages',
        'order_cancellation_denied_messages' => 'getOrderCancellationDeniedMessages',
        'order_cancellation_messages' => 'getOrderCancellationMessages',
        'order_cleared_messages' => 'getOrderClearedMessages',
        'order_messages' => 'getOrderMessages',
        'order_rejected_messages' => 'getOrderRejectedMessages',
        'query_messages' => 'getQueryMessages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['backcharge_cleared_messages'] = isset($data['backcharge_cleared_messages']) ? $data['backcharge_cleared_messages'] : null;
        $this->container['backcharge_confirmed_messages'] = isset($data['backcharge_confirmed_messages']) ? $data['backcharge_confirmed_messages'] : null;
        $this->container['backcharge_denied_messages'] = isset($data['backcharge_denied_messages']) ? $data['backcharge_denied_messages'] : null;
        $this->container['backcharge_messages'] = isset($data['backcharge_messages']) ? $data['backcharge_messages'] : null;
        $this->container['florist_assigned_messages'] = isset($data['florist_assigned_messages']) ? $data['florist_assigned_messages'] : null;
        $this->container['delivery_confirmed_messages'] = isset($data['delivery_confirmed_messages']) ? $data['delivery_confirmed_messages'] : null;
        $this->container['general_messages'] = isset($data['general_messages']) ? $data['general_messages'] : null;
        $this->container['order_cancellation_confirmed_messages'] = isset($data['order_cancellation_confirmed_messages']) ? $data['order_cancellation_confirmed_messages'] : null;
        $this->container['order_cancellation_denied_messages'] = isset($data['order_cancellation_denied_messages']) ? $data['order_cancellation_denied_messages'] : null;
        $this->container['order_cancellation_messages'] = isset($data['order_cancellation_messages']) ? $data['order_cancellation_messages'] : null;
        $this->container['order_cleared_messages'] = isset($data['order_cleared_messages']) ? $data['order_cleared_messages'] : null;
        $this->container['order_messages'] = isset($data['order_messages']) ? $data['order_messages'] : null;
        $this->container['order_rejected_messages'] = isset($data['order_rejected_messages']) ? $data['order_rejected_messages'] : null;
        $this->container['query_messages'] = isset($data['query_messages']) ? $data['query_messages'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count count
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets backcharge_cleared_messages
     *
     * @return \Swagger\Client\Model\ModelMessagesBackchargeClearedMessage[]
     */
    public function getBackchargeClearedMessages()
    {
        return $this->container['backcharge_cleared_messages'];
    }

    /**
     * Sets backcharge_cleared_messages
     *
     * @param \Swagger\Client\Model\ModelMessagesBackchargeClearedMessage[] $backcharge_cleared_messages backcharge_cleared_messages
     *
     * @return $this
     */
    public function setBackchargeClearedMessages($backcharge_cleared_messages)
    {
        $this->container['backcharge_cleared_messages'] = $backcharge_cleared_messages;

        return $this;
    }

    /**
     * Gets backcharge_confirmed_messages
     *
     * @return \Swagger\Client\Model\ModelMessagesBackchargeConfirmedMessage[]
     */
    public function getBackchargeConfirmedMessages()
    {
        return $this->container['backcharge_confirmed_messages'];
    }

    /**
     * Sets backcharge_confirmed_messages
     *
     * @param \Swagger\Client\Model\ModelMessagesBackchargeConfirmedMessage[] $backcharge_confirmed_messages backcharge_confirmed_messages
     *
     * @return $this
     */
    public function setBackchargeConfirmedMessages($backcharge_confirmed_messages)
    {
        $this->container['backcharge_confirmed_messages'] = $backcharge_confirmed_messages;

        return $this;
    }

    /**
     * Gets backcharge_denied_messages
     *
     * @return \Swagger\Client\Model\ModelMessagesBackchargeDeniedMessage[]
     */
    public function getBackchargeDeniedMessages()
    {
        return $this->container['backcharge_denied_messages'];
    }

    /**
     * Sets backcharge_denied_messages
     *
     * @param \Swagger\Client\Model\ModelMessagesBackchargeDeniedMessage[] $backcharge_denied_messages backcharge_denied_messages
     *
     * @return $this
     */
    public function setBackchargeDeniedMessages($backcharge_denied_messages)
    {
        $this->container['backcharge_denied_messages'] = $backcharge_denied_messages;

        return $this;
    }

    /**
     * Gets backcharge_messages
     *
     * @return \Swagger\Client\Model\ModelMessagesBackchargeMessage[]
     */
    public function getBackchargeMessages()
    {
        return $this->container['backcharge_messages'];
    }

    /**
     * Sets backcharge_messages
     *
     * @param \Swagger\Client\Model\ModelMessagesBackchargeMessage[] $backcharge_messages backcharge_messages
     *
     * @return $this
     */
    public function setBackchargeMessages($backcharge_messages)
    {
        $this->container['backcharge_messages'] = $backcharge_messages;

        return $this;
    }

    /**
     * Gets florist_assigned_messages
     *
     * @return \Swagger\Client\Model\ModelMessagesFloristAssignedMessage[]
     */
    public function getFloristAssignedMessages()
    {
        return $this->container['florist_assigned_messages'];
    }

    /**
     * Sets florist_assigned_messages
     *
     * @param \Swagger\Client\Model\ModelMessagesFloristAssignedMessage[] $florist_assigned_messages florist_assigned_messages
     *
     * @return $this
     */
    public function setFloristAssignedMessages($florist_assigned_messages)
    {
        $this->container['florist_assigned_messages'] = $florist_assigned_messages;

        return $this;
    }

    /**
     * Gets delivery_confirmed_messages
     *
     * @return \Swagger\Client\Model\ModelMessagesDeliveryConfirmedMessage[]
     */
    public function getDeliveryConfirmedMessages()
    {
        return $this->container['delivery_confirmed_messages'];
    }

    /**
     * Sets delivery_confirmed_messages
     *
     * @param \Swagger\Client\Model\ModelMessagesDeliveryConfirmedMessage[] $delivery_confirmed_messages delivery_confirmed_messages
     *
     * @return $this
     */
    public function setDeliveryConfirmedMessages($delivery_confirmed_messages)
    {
        $this->container['delivery_confirmed_messages'] = $delivery_confirmed_messages;

        return $this;
    }

    /**
     * Gets general_messages
     *
     * @return \Swagger\Client\Model\ModelMessagesGeneralMessage[]
     */
    public function getGeneralMessages()
    {
        return $this->container['general_messages'];
    }

    /**
     * Sets general_messages
     *
     * @param \Swagger\Client\Model\ModelMessagesGeneralMessage[] $general_messages general_messages
     *
     * @return $this
     */
    public function setGeneralMessages($general_messages)
    {
        $this->container['general_messages'] = $general_messages;

        return $this;
    }

    /**
     * Gets order_cancellation_confirmed_messages
     *
     * @return \Swagger\Client\Model\ModelMessagesOrderCancellationConfirmedMessage[]
     */
    public function getOrderCancellationConfirmedMessages()
    {
        return $this->container['order_cancellation_confirmed_messages'];
    }

    /**
     * Sets order_cancellation_confirmed_messages
     *
     * @param \Swagger\Client\Model\ModelMessagesOrderCancellationConfirmedMessage[] $order_cancellation_confirmed_messages order_cancellation_confirmed_messages
     *
     * @return $this
     */
    public function setOrderCancellationConfirmedMessages($order_cancellation_confirmed_messages)
    {
        $this->container['order_cancellation_confirmed_messages'] = $order_cancellation_confirmed_messages;

        return $this;
    }

    /**
     * Gets order_cancellation_denied_messages
     *
     * @return \Swagger\Client\Model\ModelMessagesOrderCancellationDeniedMessage[]
     */
    public function getOrderCancellationDeniedMessages()
    {
        return $this->container['order_cancellation_denied_messages'];
    }

    /**
     * Sets order_cancellation_denied_messages
     *
     * @param \Swagger\Client\Model\ModelMessagesOrderCancellationDeniedMessage[] $order_cancellation_denied_messages order_cancellation_denied_messages
     *
     * @return $this
     */
    public function setOrderCancellationDeniedMessages($order_cancellation_denied_messages)
    {
        $this->container['order_cancellation_denied_messages'] = $order_cancellation_denied_messages;

        return $this;
    }

    /**
     * Gets order_cancellation_messages
     *
     * @return \Swagger\Client\Model\ModelMessagesOrderCancellationMessage[]
     */
    public function getOrderCancellationMessages()
    {
        return $this->container['order_cancellation_messages'];
    }

    /**
     * Sets order_cancellation_messages
     *
     * @param \Swagger\Client\Model\ModelMessagesOrderCancellationMessage[] $order_cancellation_messages order_cancellation_messages
     *
     * @return $this
     */
    public function setOrderCancellationMessages($order_cancellation_messages)
    {
        $this->container['order_cancellation_messages'] = $order_cancellation_messages;

        return $this;
    }

    /**
     * Gets order_cleared_messages
     *
     * @return \Swagger\Client\Model\ModelMessagesOrderClearedMessage[]
     */
    public function getOrderClearedMessages()
    {
        return $this->container['order_cleared_messages'];
    }

    /**
     * Sets order_cleared_messages
     *
     * @param \Swagger\Client\Model\ModelMessagesOrderClearedMessage[] $order_cleared_messages order_cleared_messages
     *
     * @return $this
     */
    public function setOrderClearedMessages($order_cleared_messages)
    {
        $this->container['order_cleared_messages'] = $order_cleared_messages;

        return $this;
    }

    /**
     * Gets order_messages
     *
     * @return \Swagger\Client\Model\ModelMessagesOrderMessage[]
     */
    public function getOrderMessages()
    {
        return $this->container['order_messages'];
    }

    /**
     * Sets order_messages
     *
     * @param \Swagger\Client\Model\ModelMessagesOrderMessage[] $order_messages order_messages
     *
     * @return $this
     */
    public function setOrderMessages($order_messages)
    {
        $this->container['order_messages'] = $order_messages;

        return $this;
    }

    /**
     * Gets order_rejected_messages
     *
     * @return \Swagger\Client\Model\ModelMessagesOrderRejectedMessage[]
     */
    public function getOrderRejectedMessages()
    {
        return $this->container['order_rejected_messages'];
    }

    /**
     * Sets order_rejected_messages
     *
     * @param \Swagger\Client\Model\ModelMessagesOrderRejectedMessage[] $order_rejected_messages order_rejected_messages
     *
     * @return $this
     */
    public function setOrderRejectedMessages($order_rejected_messages)
    {
        $this->container['order_rejected_messages'] = $order_rejected_messages;

        return $this;
    }

    /**
     * Gets query_messages
     *
     * @return \Swagger\Client\Model\ModelMessagesQueryMessage[]
     */
    public function getQueryMessages()
    {
        return $this->container['query_messages'];
    }

    /**
     * Sets query_messages
     *
     * @param \Swagger\Client\Model\ModelMessagesQueryMessage[] $query_messages query_messages
     *
     * @return $this
     */
    public function setQueryMessages($query_messages)
    {
        $this->container['query_messages'] = $query_messages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


