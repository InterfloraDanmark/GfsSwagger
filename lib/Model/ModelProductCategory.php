<?php
/**
 * ModelProductCategory
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swan API v4
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ModelProductCategory Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelProductCategory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Model.ProductCategory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'parent_id' => 'int',
        'ordering' => 'int',
        'removed_date' => '\DateTime',
        'last_update' => '\DateTime',
        'allow_children' => 'bool',
        'allow_select_many' => 'bool',
        'is_addon' => 'bool',
        'allow_addon' => 'bool',
        'generic' => 'bool',
        'non_generic' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'name' => null,
        'description' => null,
        'parent_id' => 'int32',
        'ordering' => 'int32',
        'removed_date' => 'date-time',
        'last_update' => 'date-time',
        'allow_children' => null,
        'allow_select_many' => null,
        'is_addon' => null,
        'allow_addon' => null,
        'generic' => null,
        'non_generic' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'name' => 'Name',
        'description' => 'Description',
        'parent_id' => 'ParentId',
        'ordering' => 'Ordering',
        'removed_date' => 'RemovedDate',
        'last_update' => 'LastUpdate',
        'allow_children' => 'AllowChildren',
        'allow_select_many' => 'AllowSelectMany',
        'is_addon' => 'IsAddon',
        'allow_addon' => 'AllowAddon',
        'generic' => 'Generic',
        'non_generic' => 'NonGeneric'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'parent_id' => 'setParentId',
        'ordering' => 'setOrdering',
        'removed_date' => 'setRemovedDate',
        'last_update' => 'setLastUpdate',
        'allow_children' => 'setAllowChildren',
        'allow_select_many' => 'setAllowSelectMany',
        'is_addon' => 'setIsAddon',
        'allow_addon' => 'setAllowAddon',
        'generic' => 'setGeneric',
        'non_generic' => 'setNonGeneric'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'parent_id' => 'getParentId',
        'ordering' => 'getOrdering',
        'removed_date' => 'getRemovedDate',
        'last_update' => 'getLastUpdate',
        'allow_children' => 'getAllowChildren',
        'allow_select_many' => 'getAllowSelectMany',
        'is_addon' => 'getIsAddon',
        'allow_addon' => 'getAllowAddon',
        'generic' => 'getGeneric',
        'non_generic' => 'getNonGeneric'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['ordering'] = isset($data['ordering']) ? $data['ordering'] : null;
        $this->container['removed_date'] = isset($data['removed_date']) ? $data['removed_date'] : null;
        $this->container['last_update'] = isset($data['last_update']) ? $data['last_update'] : null;
        $this->container['allow_children'] = isset($data['allow_children']) ? $data['allow_children'] : null;
        $this->container['allow_select_many'] = isset($data['allow_select_many']) ? $data['allow_select_many'] : null;
        $this->container['is_addon'] = isset($data['is_addon']) ? $data['is_addon'] : null;
        $this->container['allow_addon'] = isset($data['allow_addon']) ? $data['allow_addon'] : null;
        $this->container['generic'] = isset($data['generic']) ? $data['generic'] : null;
        $this->container['non_generic'] = isset($data['non_generic']) ? $data['non_generic'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int $parent_id parent_id
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets ordering
     *
     * @return int
     */
    public function getOrdering()
    {
        return $this->container['ordering'];
    }

    /**
     * Sets ordering
     *
     * @param int $ordering ordering
     *
     * @return $this
     */
    public function setOrdering($ordering)
    {
        $this->container['ordering'] = $ordering;

        return $this;
    }

    /**
     * Gets removed_date
     *
     * @return \DateTime
     */
    public function getRemovedDate()
    {
        return $this->container['removed_date'];
    }

    /**
     * Sets removed_date
     *
     * @param \DateTime $removed_date removed_date
     *
     * @return $this
     */
    public function setRemovedDate($removed_date)
    {
        $this->container['removed_date'] = $removed_date;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return \DateTime
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param \DateTime $last_update last_update
     *
     * @return $this
     */
    public function setLastUpdate($last_update)
    {
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets allow_children
     *
     * @return bool
     */
    public function getAllowChildren()
    {
        return $this->container['allow_children'];
    }

    /**
     * Sets allow_children
     *
     * @param bool $allow_children allow_children
     *
     * @return $this
     */
    public function setAllowChildren($allow_children)
    {
        $this->container['allow_children'] = $allow_children;

        return $this;
    }

    /**
     * Gets allow_select_many
     *
     * @return bool
     */
    public function getAllowSelectMany()
    {
        return $this->container['allow_select_many'];
    }

    /**
     * Sets allow_select_many
     *
     * @param bool $allow_select_many allow_select_many
     *
     * @return $this
     */
    public function setAllowSelectMany($allow_select_many)
    {
        $this->container['allow_select_many'] = $allow_select_many;

        return $this;
    }

    /**
     * Gets is_addon
     *
     * @return bool
     */
    public function getIsAddon()
    {
        return $this->container['is_addon'];
    }

    /**
     * Sets is_addon
     *
     * @param bool $is_addon is_addon
     *
     * @return $this
     */
    public function setIsAddon($is_addon)
    {
        $this->container['is_addon'] = $is_addon;

        return $this;
    }

    /**
     * Gets allow_addon
     *
     * @return bool
     */
    public function getAllowAddon()
    {
        return $this->container['allow_addon'];
    }

    /**
     * Sets allow_addon
     *
     * @param bool $allow_addon allow_addon
     *
     * @return $this
     */
    public function setAllowAddon($allow_addon)
    {
        $this->container['allow_addon'] = $allow_addon;

        return $this;
    }

    /**
     * Gets generic
     *
     * @return bool
     */
    public function getGeneric()
    {
        return $this->container['generic'];
    }

    /**
     * Sets generic
     *
     * @param bool $generic generic
     *
     * @return $this
     */
    public function setGeneric($generic)
    {
        $this->container['generic'] = $generic;

        return $this;
    }

    /**
     * Gets non_generic
     *
     * @return bool
     */
    public function getNonGeneric()
    {
        return $this->container['non_generic'];
    }

    /**
     * Sets non_generic
     *
     * @param bool $non_generic non_generic
     *
     * @return $this
     */
    public function setNonGeneric($non_generic)
    {
        $this->container['non_generic'] = $non_generic;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


