<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Product implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'country_code' => 'string',
        'intercat_code' => 'string',
        'internal_name' => 'string',
        'name' => 'string',
        'internal_description' => 'string',
        'short_description' => 'string',
        'long_description' => 'string',
        'min_price_images' => '\Swagger\Client\Model\Media[]',
        'mid_price_images' => '\Swagger\Client\Model\Media[]',
        'max_price_images' => '\Swagger\Client\Model\Media[]',
        'availabilities' => '\Swagger\Client\Model\Availability[]',
        'peak_periods' => '\Swagger\Client\Model\PeakPeriod[]',
        'product_categories' => 'int[]',
        'is_add_on' => 'bool',
        'is_generic' => 'bool',
        'delivery_delay' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'country_code' => null,
        'intercat_code' => null,
        'internal_name' => null,
        'name' => null,
        'internal_description' => null,
        'short_description' => null,
        'long_description' => null,
        'min_price_images' => null,
        'mid_price_images' => null,
        'max_price_images' => null,
        'availabilities' => null,
        'peak_periods' => null,
        'product_categories' => 'int32',
        'is_add_on' => null,
        'is_generic' => null,
        'delivery_delay' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'country_code' => 'CountryCode',
        'intercat_code' => 'IntercatCode',
        'internal_name' => 'InternalName',
        'name' => 'Name',
        'internal_description' => 'InternalDescription',
        'short_description' => 'ShortDescription',
        'long_description' => 'LongDescription',
        'min_price_images' => 'MinPriceImages',
        'mid_price_images' => 'MidPriceImages',
        'max_price_images' => 'MaxPriceImages',
        'availabilities' => 'Availabilities',
        'peak_periods' => 'PeakPeriods',
        'product_categories' => 'ProductCategories',
        'is_add_on' => 'IsAddOn',
        'is_generic' => 'IsGeneric',
        'delivery_delay' => 'DeliveryDelay'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'country_code' => 'setCountryCode',
        'intercat_code' => 'setIntercatCode',
        'internal_name' => 'setInternalName',
        'name' => 'setName',
        'internal_description' => 'setInternalDescription',
        'short_description' => 'setShortDescription',
        'long_description' => 'setLongDescription',
        'min_price_images' => 'setMinPriceImages',
        'mid_price_images' => 'setMidPriceImages',
        'max_price_images' => 'setMaxPriceImages',
        'availabilities' => 'setAvailabilities',
        'peak_periods' => 'setPeakPeriods',
        'product_categories' => 'setProductCategories',
        'is_add_on' => 'setIsAddOn',
        'is_generic' => 'setIsGeneric',
        'delivery_delay' => 'setDeliveryDelay'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'country_code' => 'getCountryCode',
        'intercat_code' => 'getIntercatCode',
        'internal_name' => 'getInternalName',
        'name' => 'getName',
        'internal_description' => 'getInternalDescription',
        'short_description' => 'getShortDescription',
        'long_description' => 'getLongDescription',
        'min_price_images' => 'getMinPriceImages',
        'mid_price_images' => 'getMidPriceImages',
        'max_price_images' => 'getMaxPriceImages',
        'availabilities' => 'getAvailabilities',
        'peak_periods' => 'getPeakPeriods',
        'product_categories' => 'getProductCategories',
        'is_add_on' => 'getIsAddOn',
        'is_generic' => 'getIsGeneric',
        'delivery_delay' => 'getDeliveryDelay'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['intercat_code'] = isset($data['intercat_code']) ? $data['intercat_code'] : null;
        $this->container['internal_name'] = isset($data['internal_name']) ? $data['internal_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['internal_description'] = isset($data['internal_description']) ? $data['internal_description'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['long_description'] = isset($data['long_description']) ? $data['long_description'] : null;
        $this->container['min_price_images'] = isset($data['min_price_images']) ? $data['min_price_images'] : null;
        $this->container['mid_price_images'] = isset($data['mid_price_images']) ? $data['mid_price_images'] : null;
        $this->container['max_price_images'] = isset($data['max_price_images']) ? $data['max_price_images'] : null;
        $this->container['availabilities'] = isset($data['availabilities']) ? $data['availabilities'] : null;
        $this->container['peak_periods'] = isset($data['peak_periods']) ? $data['peak_periods'] : null;
        $this->container['product_categories'] = isset($data['product_categories']) ? $data['product_categories'] : null;
        $this->container['is_add_on'] = isset($data['is_add_on']) ? $data['is_add_on'] : null;
        $this->container['is_generic'] = isset($data['is_generic']) ? $data['is_generic'] : null;
        $this->container['delivery_delay'] = isset($data['delivery_delay']) ? $data['delivery_delay'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets intercat_code
     *
     * @return string
     */
    public function getIntercatCode()
    {
        return $this->container['intercat_code'];
    }

    /**
     * Sets intercat_code
     *
     * @param string $intercat_code intercat_code
     *
     * @return $this
     */
    public function setIntercatCode($intercat_code)
    {
        $this->container['intercat_code'] = $intercat_code;

        return $this;
    }

    /**
     * Gets internal_name
     *
     * @return string
     */
    public function getInternalName()
    {
        return $this->container['internal_name'];
    }

    /**
     * Sets internal_name
     *
     * @param string $internal_name internal_name
     *
     * @return $this
     */
    public function setInternalName($internal_name)
    {
        $this->container['internal_name'] = $internal_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets internal_description
     *
     * @return string
     */
    public function getInternalDescription()
    {
        return $this->container['internal_description'];
    }

    /**
     * Sets internal_description
     *
     * @param string $internal_description internal_description
     *
     * @return $this
     */
    public function setInternalDescription($internal_description)
    {
        $this->container['internal_description'] = $internal_description;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string $short_description short_description
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param string $long_description long_description
     *
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets min_price_images
     *
     * @return \Swagger\Client\Model\Media[]
     */
    public function getMinPriceImages()
    {
        return $this->container['min_price_images'];
    }

    /**
     * Sets min_price_images
     *
     * @param \Swagger\Client\Model\Media[] $min_price_images min_price_images
     *
     * @return $this
     */
    public function setMinPriceImages($min_price_images)
    {
        $this->container['min_price_images'] = $min_price_images;

        return $this;
    }

    /**
     * Gets mid_price_images
     *
     * @return \Swagger\Client\Model\Media[]
     */
    public function getMidPriceImages()
    {
        return $this->container['mid_price_images'];
    }

    /**
     * Sets mid_price_images
     *
     * @param \Swagger\Client\Model\Media[] $mid_price_images mid_price_images
     *
     * @return $this
     */
    public function setMidPriceImages($mid_price_images)
    {
        $this->container['mid_price_images'] = $mid_price_images;

        return $this;
    }

    /**
     * Gets max_price_images
     *
     * @return \Swagger\Client\Model\Media[]
     */
    public function getMaxPriceImages()
    {
        return $this->container['max_price_images'];
    }

    /**
     * Sets max_price_images
     *
     * @param \Swagger\Client\Model\Media[] $max_price_images max_price_images
     *
     * @return $this
     */
    public function setMaxPriceImages($max_price_images)
    {
        $this->container['max_price_images'] = $max_price_images;

        return $this;
    }

    /**
     * Gets availabilities
     *
     * @return \Swagger\Client\Model\Availability[]
     */
    public function getAvailabilities()
    {
        return $this->container['availabilities'];
    }

    /**
     * Sets availabilities
     *
     * @param \Swagger\Client\Model\Availability[] $availabilities availabilities
     *
     * @return $this
     */
    public function setAvailabilities($availabilities)
    {
        $this->container['availabilities'] = $availabilities;

        return $this;
    }

    /**
     * Gets peak_periods
     *
     * @return \Swagger\Client\Model\PeakPeriod[]
     */
    public function getPeakPeriods()
    {
        return $this->container['peak_periods'];
    }

    /**
     * Sets peak_periods
     *
     * @param \Swagger\Client\Model\PeakPeriod[] $peak_periods peak_periods
     *
     * @return $this
     */
    public function setPeakPeriods($peak_periods)
    {
        $this->container['peak_periods'] = $peak_periods;

        return $this;
    }

    /**
     * Gets product_categories
     *
     * @return int[]
     */
    public function getProductCategories()
    {
        return $this->container['product_categories'];
    }

    /**
     * Sets product_categories
     *
     * @param int[] $product_categories product_categories
     *
     * @return $this
     */
    public function setProductCategories($product_categories)
    {
        $this->container['product_categories'] = $product_categories;

        return $this;
    }

    /**
     * Gets is_add_on
     *
     * @return bool
     */
    public function getIsAddOn()
    {
        return $this->container['is_add_on'];
    }

    /**
     * Sets is_add_on
     *
     * @param bool $is_add_on is_add_on
     *
     * @return $this
     */
    public function setIsAddOn($is_add_on)
    {
        $this->container['is_add_on'] = $is_add_on;

        return $this;
    }

    /**
     * Gets is_generic
     *
     * @return bool
     */
    public function getIsGeneric()
    {
        return $this->container['is_generic'];
    }

    /**
     * Sets is_generic
     *
     * @param bool $is_generic is_generic
     *
     * @return $this
     */
    public function setIsGeneric($is_generic)
    {
        $this->container['is_generic'] = $is_generic;

        return $this;
    }

    /**
     * Gets delivery_delay
     *
     * @return int
     */
    public function getDeliveryDelay()
    {
        return $this->container['delivery_delay'];
    }

    /**
     * Sets delivery_delay
     *
     * @param int $delivery_delay delivery_delay
     *
     * @return $this
     */
    public function setDeliveryDelay($delivery_delay)
    {
        $this->container['delivery_delay'] = $delivery_delay;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


