<?php
/**
 * ModelMessagesBackchargeConfirmedMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swan API v4
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ModelMessagesBackchargeConfirmedMessage Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelMessagesBackchargeConfirmedMessage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Model.Messages.BackchargeConfirmedMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'backcharge_id' => 'int',
        'id' => 'int',
        'gf_sgate_number' => 'int',
        'message_status' => 'int',
        'message_type' => 'int',
        'created_date' => '\DateTime',
        'modified_date' => '\DateTime',
        'confirmed_date' => '\DateTime',
        'from_unit_id' => 'int',
        'from_unit_message_id' => 'int',
        'to_unit_id' => 'int',
        'to_unit_message_id' => 'int',
        'operator' => 'string',
        'priority' => 'int',
        'related_message_id' => 'int',
        'read' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'backcharge_id' => 'int32',
        'id' => 'int32',
        'gf_sgate_number' => 'int32',
        'message_status' => 'int32',
        'message_type' => 'int32',
        'created_date' => 'date-time',
        'modified_date' => 'date-time',
        'confirmed_date' => 'date-time',
        'from_unit_id' => 'int32',
        'from_unit_message_id' => 'int32',
        'to_unit_id' => 'int32',
        'to_unit_message_id' => 'int32',
        'operator' => null,
        'priority' => 'int32',
        'related_message_id' => 'int32',
        'read' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backcharge_id' => 'BackchargeID',
        'id' => 'Id',
        'gf_sgate_number' => 'GFSgateNumber',
        'message_status' => 'MessageStatus',
        'message_type' => 'MessageType',
        'created_date' => 'CreatedDate',
        'modified_date' => 'ModifiedDate',
        'confirmed_date' => 'ConfirmedDate',
        'from_unit_id' => 'FromUnitID',
        'from_unit_message_id' => 'FromUnitMessageID',
        'to_unit_id' => 'ToUnitID',
        'to_unit_message_id' => 'ToUnitMessageID',
        'operator' => 'Operator',
        'priority' => 'Priority',
        'related_message_id' => 'RelatedMessageId',
        'read' => 'Read'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backcharge_id' => 'setBackchargeId',
        'id' => 'setId',
        'gf_sgate_number' => 'setGfSgateNumber',
        'message_status' => 'setMessageStatus',
        'message_type' => 'setMessageType',
        'created_date' => 'setCreatedDate',
        'modified_date' => 'setModifiedDate',
        'confirmed_date' => 'setConfirmedDate',
        'from_unit_id' => 'setFromUnitId',
        'from_unit_message_id' => 'setFromUnitMessageId',
        'to_unit_id' => 'setToUnitId',
        'to_unit_message_id' => 'setToUnitMessageId',
        'operator' => 'setOperator',
        'priority' => 'setPriority',
        'related_message_id' => 'setRelatedMessageId',
        'read' => 'setRead'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backcharge_id' => 'getBackchargeId',
        'id' => 'getId',
        'gf_sgate_number' => 'getGfSgateNumber',
        'message_status' => 'getMessageStatus',
        'message_type' => 'getMessageType',
        'created_date' => 'getCreatedDate',
        'modified_date' => 'getModifiedDate',
        'confirmed_date' => 'getConfirmedDate',
        'from_unit_id' => 'getFromUnitId',
        'from_unit_message_id' => 'getFromUnitMessageId',
        'to_unit_id' => 'getToUnitId',
        'to_unit_message_id' => 'getToUnitMessageId',
        'operator' => 'getOperator',
        'priority' => 'getPriority',
        'related_message_id' => 'getRelatedMessageId',
        'read' => 'getRead'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MESSAGE_STATUS_1 = 1;
    const MESSAGE_STATUS_2 = 2;
    const MESSAGE_STATUS_3 = 3;
    const MESSAGE_STATUS_4 = 4;
    const MESSAGE_STATUS_5 = 5;
    const MESSAGE_STATUS_6 = 6;
    const MESSAGE_STATUS_9 = 9;
    const MESSAGE_STATUS_10 = 10;
    const MESSAGE_STATUS_11 = 11;
    const MESSAGE_STATUS_12 = 12;
    const MESSAGE_STATUS_13 = 13;
    const MESSAGE_STATUS_14 = 14;
    const MESSAGE_TYPE_1 = 1;
    const MESSAGE_TYPE_3 = 3;
    const MESSAGE_TYPE_4 = 4;
    const MESSAGE_TYPE_5 = 5;
    const MESSAGE_TYPE_6 = 6;
    const MESSAGE_TYPE_7 = 7;
    const MESSAGE_TYPE_10 = 10;
    const MESSAGE_TYPE_13 = 13;
    const MESSAGE_TYPE_15 = 15;
    const MESSAGE_TYPE_22 = 22;
    const MESSAGE_TYPE_23 = 23;
    const MESSAGE_TYPE_24 = 24;
    const MESSAGE_TYPE_25 = 25;
    const MESSAGE_TYPE_26 = 26;
    const MESSAGE_TYPE_27 = 27;
    const MESSAGE_TYPE_28 = 28;
    const MESSAGE_TYPE_30 = 30;
    const MESSAGE_TYPE_31 = 31;
    const PRIORITY_1 = 1;
    const PRIORITY_2 = 2;
    const PRIORITY_3 = 3;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageStatusAllowableValues()
    {
        return [
            self::MESSAGE_STATUS_1,
            self::MESSAGE_STATUS_2,
            self::MESSAGE_STATUS_3,
            self::MESSAGE_STATUS_4,
            self::MESSAGE_STATUS_5,
            self::MESSAGE_STATUS_6,
            self::MESSAGE_STATUS_9,
            self::MESSAGE_STATUS_10,
            self::MESSAGE_STATUS_11,
            self::MESSAGE_STATUS_12,
            self::MESSAGE_STATUS_13,
            self::MESSAGE_STATUS_14,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageTypeAllowableValues()
    {
        return [
            self::MESSAGE_TYPE_1,
            self::MESSAGE_TYPE_3,
            self::MESSAGE_TYPE_4,
            self::MESSAGE_TYPE_5,
            self::MESSAGE_TYPE_6,
            self::MESSAGE_TYPE_7,
            self::MESSAGE_TYPE_10,
            self::MESSAGE_TYPE_13,
            self::MESSAGE_TYPE_15,
            self::MESSAGE_TYPE_22,
            self::MESSAGE_TYPE_23,
            self::MESSAGE_TYPE_24,
            self::MESSAGE_TYPE_25,
            self::MESSAGE_TYPE_26,
            self::MESSAGE_TYPE_27,
            self::MESSAGE_TYPE_28,
            self::MESSAGE_TYPE_30,
            self::MESSAGE_TYPE_31,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriorityAllowableValues()
    {
        return [
            self::PRIORITY_1,
            self::PRIORITY_2,
            self::PRIORITY_3,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backcharge_id'] = isset($data['backcharge_id']) ? $data['backcharge_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['gf_sgate_number'] = isset($data['gf_sgate_number']) ? $data['gf_sgate_number'] : null;
        $this->container['message_status'] = isset($data['message_status']) ? $data['message_status'] : null;
        $this->container['message_type'] = isset($data['message_type']) ? $data['message_type'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
        $this->container['confirmed_date'] = isset($data['confirmed_date']) ? $data['confirmed_date'] : null;
        $this->container['from_unit_id'] = isset($data['from_unit_id']) ? $data['from_unit_id'] : null;
        $this->container['from_unit_message_id'] = isset($data['from_unit_message_id']) ? $data['from_unit_message_id'] : null;
        $this->container['to_unit_id'] = isset($data['to_unit_id']) ? $data['to_unit_id'] : null;
        $this->container['to_unit_message_id'] = isset($data['to_unit_message_id']) ? $data['to_unit_message_id'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['related_message_id'] = isset($data['related_message_id']) ? $data['related_message_id'] : null;
        $this->container['read'] = isset($data['read']) ? $data['read'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMessageStatusAllowableValues();
        if (!is_null($this->container['message_status']) && !in_array($this->container['message_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'message_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMessageTypeAllowableValues();
        if (!is_null($this->container['message_type']) && !in_array($this->container['message_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'message_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($this->container['priority']) && !in_array($this->container['priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'priority', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backcharge_id
     *
     * @return int
     */
    public function getBackchargeId()
    {
        return $this->container['backcharge_id'];
    }

    /**
     * Sets backcharge_id
     *
     * @param int $backcharge_id backcharge_id
     *
     * @return $this
     */
    public function setBackchargeId($backcharge_id)
    {
        $this->container['backcharge_id'] = $backcharge_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets gf_sgate_number
     *
     * @return int
     */
    public function getGfSgateNumber()
    {
        return $this->container['gf_sgate_number'];
    }

    /**
     * Sets gf_sgate_number
     *
     * @param int $gf_sgate_number gf_sgate_number
     *
     * @return $this
     */
    public function setGfSgateNumber($gf_sgate_number)
    {
        $this->container['gf_sgate_number'] = $gf_sgate_number;

        return $this;
    }

    /**
     * Gets message_status
     *
     * @return int
     */
    public function getMessageStatus()
    {
        return $this->container['message_status'];
    }

    /**
     * Sets message_status
     *
     * @param int $message_status message_status
     *
     * @return $this
     */
    public function setMessageStatus($message_status)
    {
        $allowedValues = $this->getMessageStatusAllowableValues();
        if (!is_null($message_status) && !in_array($message_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'message_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['message_status'] = $message_status;

        return $this;
    }

    /**
     * Gets message_type
     *
     * @return int
     */
    public function getMessageType()
    {
        return $this->container['message_type'];
    }

    /**
     * Sets message_type
     *
     * @param int $message_type message_type
     *
     * @return $this
     */
    public function setMessageType($message_type)
    {
        $allowedValues = $this->getMessageTypeAllowableValues();
        if (!is_null($message_type) && !in_array($message_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'message_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['message_type'] = $message_type;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date created_date
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime $modified_date modified_date
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets confirmed_date
     *
     * @return \DateTime
     */
    public function getConfirmedDate()
    {
        return $this->container['confirmed_date'];
    }

    /**
     * Sets confirmed_date
     *
     * @param \DateTime $confirmed_date confirmed_date
     *
     * @return $this
     */
    public function setConfirmedDate($confirmed_date)
    {
        $this->container['confirmed_date'] = $confirmed_date;

        return $this;
    }

    /**
     * Gets from_unit_id
     *
     * @return int
     */
    public function getFromUnitId()
    {
        return $this->container['from_unit_id'];
    }

    /**
     * Sets from_unit_id
     *
     * @param int $from_unit_id from_unit_id
     *
     * @return $this
     */
    public function setFromUnitId($from_unit_id)
    {
        $this->container['from_unit_id'] = $from_unit_id;

        return $this;
    }

    /**
     * Gets from_unit_message_id
     *
     * @return int
     */
    public function getFromUnitMessageId()
    {
        return $this->container['from_unit_message_id'];
    }

    /**
     * Sets from_unit_message_id
     *
     * @param int $from_unit_message_id from_unit_message_id
     *
     * @return $this
     */
    public function setFromUnitMessageId($from_unit_message_id)
    {
        $this->container['from_unit_message_id'] = $from_unit_message_id;

        return $this;
    }

    /**
     * Gets to_unit_id
     *
     * @return int
     */
    public function getToUnitId()
    {
        return $this->container['to_unit_id'];
    }

    /**
     * Sets to_unit_id
     *
     * @param int $to_unit_id to_unit_id
     *
     * @return $this
     */
    public function setToUnitId($to_unit_id)
    {
        $this->container['to_unit_id'] = $to_unit_id;

        return $this;
    }

    /**
     * Gets to_unit_message_id
     *
     * @return int
     */
    public function getToUnitMessageId()
    {
        return $this->container['to_unit_message_id'];
    }

    /**
     * Sets to_unit_message_id
     *
     * @param int $to_unit_message_id to_unit_message_id
     *
     * @return $this
     */
    public function setToUnitMessageId($to_unit_message_id)
    {
        $this->container['to_unit_message_id'] = $to_unit_message_id;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator operator
     *
     * @return $this
     */
    public function setOperator($operator)
    {
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($priority) && !in_array($priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'priority', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets related_message_id
     *
     * @return int
     */
    public function getRelatedMessageId()
    {
        return $this->container['related_message_id'];
    }

    /**
     * Sets related_message_id
     *
     * @param int $related_message_id related_message_id
     *
     * @return $this
     */
    public function setRelatedMessageId($related_message_id)
    {
        $this->container['related_message_id'] = $related_message_id;

        return $this;
    }

    /**
     * Gets read
     *
     * @return bool
     */
    public function getRead()
    {
        return $this->container['read'];
    }

    /**
     * Sets read
     *
     * @param bool $read read
     *
     * @return $this
     */
    public function setRead($read)
    {
        $this->container['read'] = $read;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


